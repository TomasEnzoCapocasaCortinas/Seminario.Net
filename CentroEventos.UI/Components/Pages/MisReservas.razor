@page "/misreservas"
@rendermode InteractiveServer
@using System
@using CentroEventos.Aplicacion.Interfaces
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.Enumerativos
@inject IRepositorioReserva RepositorioReservas
@inject ServicioSesionUsuario Sesion
@inject IRepositorioEventoDeportivo RepositorioEventos

<PageTitle>Mis Reservas</PageTitle>

<h1>Mis Reservas</h1>

@if (misReservas == null)
{
    <p><em>No Tenés ninguna reserva.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Evento</th>
                <th>Fecha y hora</th>
                <th>Duracion</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reserva in misReservas)
            {
                var evento = eventosPorId[reserva.EventoDeportivoId];
                <tr>
                    <td>@evento.ID</td>
                    <td>@evento.Nombre</td>
                    <td>@evento.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@evento.DuracionHoras hs</td>
                    <td>@reserva.EstadoAsistencia</td>
                        @if (evento.FechaHoraInicio > DateTime.Now)
                        {
                            <td> 
                                <button class="btn btn-danger btn-sm" @onclick="() => CancelarReserva(reserva.Id)">Cancelar</button>
                            </td>
                        } 
                        else if (reserva.EstadoAsistencia == EstadoAsistencia.Pendiente)
                        {
                            <td> 
                                <button class="btn btn-success btn-sm" @onclick="() => MarcarAsistencia(reserva.Id, EstadoAsistencia.Presente)">Presente</button>
                                <button class="btn btn-warning btn-sm" @onclick="() => MarcarAsistencia(reserva.Id, EstadoAsistencia.Ausente)">Ausente</button>
                            </td>
                        }
                </tr>
            }
        </tbody>
    </table>
}
@code
{
    private Usuario? usuarioActual;
    private List<Reserva>? misReservas;
    private Dictionary<int, EventoDeportivo> eventosPorId = new();
    private string? mensaje;
    private bool TienePermiso(Permiso permiso)
    {
        return Sesion.EstaAutenticado() && Sesion.ObtenerUsuarioActual().Permisos.Contains(permiso);
    }

    protected override void OnInitialized()
    {
        usuarioActual = Sesion.ObtenerUsuarioActual();

        if (usuarioActual != null)
        {
            CargarReservas();
        }
        
    }

    private void CargarReservas(){
        misReservas = RepositorioReservas.ObtenerReservasPorPersona(usuarioActual!.Id);

            var eventosIds = misReservas.Select(r => r.EventoDeportivoId).Distinct();
            foreach (var id in eventosIds)
            {
                var evento = RepositorioEventos.ObtenerPorId(id);
                if (evento != null)
                    eventosPorId[id] = evento;
            }
    }
     private void CancelarReserva(int reservaId)
    {
        if (!TienePermiso(Permiso.ReservaBaja))
        {
            mensaje = "No tenés permiso para eliminar la reserva.";
            return;
        }
        RepositorioReservas.Eliminar(reservaId);
        mensaje = "Reserva cancelada correctamente.";
        CargarReservas();
        StateHasChanged();
    }
    private void MarcarAsistencia(int reservaId, EstadoAsistencia nuevoEstado)
    {
        var reserva = misReservas!.FirstOrDefault(r => r.Id == reservaId);
        if (reserva != null)
        {
            reserva.EstadoAsistencia = nuevoEstado;
#line default
        mensaje = $"Asistencia marcada como {nuevoEstado}.";
            CargarReservas();
            StateHasChanged();
        }
    } 
}

