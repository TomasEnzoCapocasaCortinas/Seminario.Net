@page "/mispersonas"
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.Interfaces
@using CentroEventos.Aplicacion.Enumerativos
@rendermode InteractiveServer
@inject ServicioSesionUsuario Sesion
@inject BajaPersona bajaPersona
@inject ObtenerTodosEventosDeportivos listarEventos
@inject ListadoPersona listarPersonas
@inject NavigationManager Nav

<h1>Listado de Personas</h1>
<div class="d-flex justify-content-center mt-2">
    @if (Sesion.ObtenerUsuarioActual().Permisos.Contains(Permiso.PersonaAlta))
    {
    <button class="btn btn-success mb-3" @onclick="NuevaPersona">
        <span class="oi oi-plus"></span> Nueva Persona
    </button>
    }
</div>
@if (personas == null)
{
    <p>Cargando...</p>
}
else if (!personas.Any())
{
    <p>No hay personas registradas</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>DNI</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Teléfono</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in personas)
            {
                <tr>
                    <td>@persona.Id</td>
                    <td>@persona.Dni</td>
                    <td>@persona.Nombre</td>
                    <td>@persona.Apellido</td>
                    <td>@persona.Email</td>
                    <td>@persona.Tel</td>
                    <td>
                        @if (Sesion.ObtenerUsuarioActual().Permisos.Contains(Permiso.PersonaModificacion))
                        {
                        <button class="btn btn-sm btn-primary ms-1" @onclick="@(() => Editar(persona.Id))">
                        Editar    <span class="oi oi-trash"></span>
                        </button>
                        }
                        @if (Sesion.ObtenerUsuarioActual().Permisos.Contains(Permiso.PersonaBaja))
                        {
                        <button class="btn btn-sm btn-danger ms-1" @onclick="@(() => Eliminar(persona.Id))">
                        Eliminar    <span class="oi oi-trash"></span>
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    @if(exito){
        <div class="alert alert-success mt-3">@mensaje</div>
    }else{
        <p class="alert alert-danger mt-3">@mensaje</p>
    }
}

@code {
    private Usuario? usuarioActual;
    private List<Persona>? personas;
    private string? mensaje;
    private bool TienePermiso(Permiso permiso)
    {
        return Sesion.EstaAutenticado() && Sesion.ObtenerUsuarioActual().Permisos.Contains(permiso);
    }
    private bool exito=false;
    protected override void OnInitialized()
    {
        usuarioActual = Sesion.ObtenerUsuarioActual();
        CargarPersonas();
    }

    private void CargarPersonas()
    {
        try
        {
            personas = listarPersonas.Ejecutar();
        }
        catch (Exception ex)
        {
            mensaje = ex.Message;
        }
    }

    private void NuevaPersona()
    {
        if (!TienePermiso(Permiso.PersonaAlta))
        {
            mensaje = "No tenés permiso para crear personas.";
            return;
        }
        Nav.NavigateTo("/crear-persona");
    }

    private void Editar(int id)
    {
        if (!TienePermiso(Permiso.PersonaModificacion))
        {
            mensaje = "No tenés permiso para modificar personas.";
            return;
        }
        Nav.NavigateTo("/editar-persona");
    }

    private void Eliminar(int id)
    {
        try
        {
            if (!TienePermiso(Permiso.PersonaBaja))
            {
                mensaje = "No tenés permiso para eliminar personas.";
                return;
            }
            var eventos = listarEventos.Ejecutar();
            var esResponsable = eventos.Any(e => e.ResponsableID == id);

            if (esResponsable)
            {
                mensaje = "No se puede eliminar la persona porque es responsable de al menos un evento.";
                return;
            }
            bajaPersona.Ejecutar(id, usuarioActual!.Id);
            exito=true;
            mensaje = "Persona eliminada correctamente.";
            CargarPersonas();
        }
        catch (Exception ex)
        {
            mensaje = ex.Message;
        }
    }
}