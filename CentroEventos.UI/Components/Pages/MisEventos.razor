@page "/miseventos"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.CasosDeUso
@using CentroEventos.Aplicacion.Enumerativos
@inject ServicioSesionUsuario Sesion
@inject IRepositorioEventoDeportivo RepositorioEventos
@inject EliminarEventoDeportivo eliminarEventoDeportivo
@inject ObtenerTodosEventosDeportivos obtenerEventosDeportivos
@inject NavigationManager NavigationManager

<h1>Mis Eventos</h1>

@if (miseventos == null || !miseventos.Any())
{
    <p><em>No tenés ningún evento.</em></p>
}
else
{
    <table class="table">
       <thead>
           <tr>
               <th>ID</th>
               <th>Nombre</th>
               <th>Descripción</th>
               <th>Fecha y hora</th>
               <th>Duración</th>
               <th>Cupo máximo</th>
               <th>Acciones</th>
           </tr>
       </thead>
       <tbody>
           @foreach (var evento in miseventos)
           {
               <tr>
                   <td>@evento.ID</td>
                   <td>@evento.Nombre</td>
                   <td>@evento.Descripcion</td>
                   <td>@evento.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</td>
                   <td>@evento.DuracionHoras hs</td>
                   <td>@evento.CupoMaximo</td>
                   <td> 
                    <button class="btn btn-danger" @onclick="() => ConfirmarEliminacion(evento)">Eliminar</button>
                   </td>
               </tr>
           }
       </tbody>
            <button class="btn btn-primary" @onclick=Editar>Editar</button>
    </table>
}
@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-danger">@mensaje</div>
}

<DialogoConfirmacion @ref="dialogo" OnConfirmar="Eliminar" />

@code {
    private Usuario? usuarioActual;
    private List<EventoDeportivo>? miseventos;
    private DialogoConfirmacion? dialogo;
    private string? mensaje;
    private EventoDeportivo? _EventoParaEliminar;
    private bool TienePermiso(Permiso permiso)
    {
        return Sesion.EstaAutenticado() && Sesion.ObtenerUsuarioActual().Permisos.Contains(permiso);
    }


    protected override void OnInitialized()
    {
        usuarioActual = Sesion.ObtenerUsuarioActual();
        if (usuarioActual != null)
        {
            miseventos = obtenerEventosDeportivos.Ejecutar().ToList();
        }
    }

    private void ConfirmarEliminacion(EventoDeportivo eve)
    {
        _EventoParaEliminar = eve;
        dialogo?.Mostrar($"¿Está seguro que desea eliminar el evento deportivo {eve.Nombre}?");
    }

    private void Eliminar()
    {
        if (_EventoParaEliminar != null)
        {
            if (!TienePermiso(Permiso.EventoBaja))
            {
                mensaje = "No tenés permiso para eliminar eventos.";
                return;
            }
            eliminarEventoDeportivo.Ejecutar(_EventoParaEliminar.ID);
            miseventos = obtenerEventosDeportivos.Ejecutar().ToList();
        }
    }

    private void Editar()
    {
        if (!TienePermiso(Permiso.EventoModificacion))
        {
            mensaje = "No tenés permiso para modificar eventos.";
            return;
        }
        NavigationManager.NavigateTo("/editarevento");
    }
}
